import * as i0 from '@angular/core';
import { EventEmitter, Directive, Output, Component, ViewChild, Input, HostListener, NgModule } from '@angular/core';
import * as i1 from 'ngx-bootstrap/datepicker';
import { DatepickerModule, BsDatepickerModule, BsDatepickerConfig } from 'ngx-bootstrap/datepicker';
import * as i2 from 'ngx-bootstrap/timepicker';
import { TimepickerModule } from 'ngx-bootstrap/timepicker';
import * as i3 from 'ngx-bootstrap/dropdown';
import { BsDropdownModule, BsDropdownConfig } from 'ngx-bootstrap/dropdown';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6 from '@angular/forms';
import { FormsModule } from '@angular/forms';

class OffClickDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.offClick = new EventEmitter();
    }
    ngOnInit() {
        this.eventHandler = ($event) => {
            $event.stopPropagation();
            if (!this.elementRef.nativeElement.contains($event.target) && $event.target.localName !== 'button') {
                this.offClick.emit(null);
            }
        };
        document.addEventListener('mouseup', this.eventHandler);
    }
    ngOnDestroy() {
        document.removeEventListener('mouseup', this.eventHandler);
    }
}
OffClickDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.0", ngImport: i0, type: OffClickDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
OffClickDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.0", type: OffClickDirective, selector: "[offClick]", outputs: { offClick: "offClick" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.0", ngImport: i0, type: OffClickDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[offClick]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { offClick: [{
                type: Output
            }] } });

class DatetimePopupComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.appendTo = undefined;
        this.valueChange = new EventEmitter();
        this.showPopup = false;
        this.showPopupChange = new EventEmitter();
        this.showDate = true;
        this.showTime = true;
        this.showWeeks = false;
        this.showMeridian = false;
        this.showSeconds = false;
        this.datepickerMode = 'day';
        this.initDate = null;
        this.minDate = null;
        this.maxDate = null;
        this.dateDisabled = [];
        this.minuteStep = 5;
        this.hourStep = 1;
        this.secondsStep = 1;
        this.localValue = null;
        this.isOpening = false;
        this.isDropUp = false;
    }
    ngOnChanges(changes) {
        if (!this.nowButton) {
            this.nowButton = { show: true, label: 'Now', cssClass: 'btn btn-secondary btn-sm' };
        }
        if (!this.clearButton) {
            this.clearButton = { show: true, label: 'Clear', cssClass: 'btn btn-secondary btn-sm' };
        }
        if (!this.closeButton) {
            this.closeButton = { show: true, label: 'Close', cssClass: 'btn btn-secondary btn-sm' };
        }
        // user maybe typing a value into an input box, so would come in as string
        if (typeof this.value === 'string') {
            // check if the string is a valid date
            if (!isNaN(new Date(this.value).getTime())) {
                this.localValue = new Date(this.value);
            }
        }
        else if (this.value) {
            this.localValue = this.value;
        }
        if (changes.showPopup && this.dropdown) {
            if (changes.showPopup.currentValue === true) {
                this.dropdown.show();
            }
            else if (changes.showPopup.currentValue === false) {
                this.dropdown.hide();
            }
        }
    }
    onWindowScroll() {
        const nativeEl = this.elementRef.nativeElement;
        const clientRect = nativeEl.getBoundingClientRect();
        const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
        const offsetTop = clientRect.top + window.pageYOffset;
        const height = clientRect.height;
        const dropdownEl = nativeEl.children.item(0);
        const menuEl = dropdownEl.children.length > 0 ? dropdownEl.children.item(0) : null;
        let menuHeight = this.showDate && this.showTime ? 402 : this.showDate ? 300 : 102;
        if (menuEl != null) {
            // get the style
            const display = menuEl.style.display;
            menuEl.style.display = 'block';
            menuHeight = menuEl.getBoundingClientRect().height;
            menuEl.style.display = display;
        }
        if ((offsetTop - menuHeight) <= 0) {
            this.isDropUp = false;
        }
        else {
            this.isDropUp = ((offsetTop + height + menuHeight) > (scrollTop + document.documentElement.clientHeight));
        }
    }
    onOpenChange(opened) {
        if (opened === true) {
            this.isOpening = true;
            this.onWindowScroll();
            this.dropdown.show();
            setTimeout(() => this.isOpening = false, 250);
        }
        else {
            this.showPopupChange.emit(false);
        }
    }
    onNow() {
        this.localValue = new Date();
        this.onPickerChange('timepicker');
    }
    onClear() {
        this.valueChange.emit(null);
    }
    onClose() {
        this.showPopupChange.emit(false);
    }
    onOffClick($event) {
        this.showPopupChange.emit(false);
    }
    onPickerChange(picker) {
        if (this.isOpening === true) {
            return;
        }
        if (picker === 'datepicker' && this.value != null) {
            const hours = this.value.getHours();
            const minutes = this.value.getMinutes();
            const seconds = this.value.getSeconds();
            const milliseconds = this.value.getMilliseconds();
            this.localValue.setHours(hours, minutes, seconds, milliseconds);
        }
        this.valueChange.emit(this.localValue);
        if (this.showDate === true && this.showTime === false) {
            this.dropdown.hide();
        }
    }
}
DatetimePopupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.0", ngImport: i0, type: DatetimePopupComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
DatetimePopupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.0", type: DatetimePopupComponent, selector: "datetime-popup", inputs: { appendTo: "appendTo", value: "value", showPopup: "showPopup", showDate: "showDate", showTime: "showTime", showWeeks: "showWeeks", showMeridian: "showMeridian", showSeconds: "showSeconds", datepickerMode: "datepickerMode", initDate: "initDate", minDate: "minDate", maxDate: "maxDate", dateDisabled: "dateDisabled", nowButton: "nowButton", clearButton: "clearButton", closeButton: "closeButton", minuteStep: "minuteStep", hourStep: "hourStep", secondsStep: "secondsStep" }, outputs: { valueChange: "valueChange", showPopupChange: "showPopupChange" }, host: { listeners: { "window:scroll": "onWindowScroll()", "window:resize": "onWindowScroll()" } }, viewQueries: [{ propertyName: "dropdown", first: true, predicate: ["dropdown"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div [container]=\"appendTo\" (isOpenChange)=\"onOpenChange($event)\" [dropup]=\"isDropUp\" dropdown #dropdown=\"bs-dropdown\" [autoClose]=\"false\" (offClick)=\"onOffClick($event)\">\r\n  <ul class=\"datetime-popup dropdown-menu\" role=\"menu\" [ngClass]=\"{ 'show': dropdown.isOpen === true, 'body-container': appendTo == 'body', 'dropdown': !isDropUp, 'dropup': isDropUp }\" *dropdownMenu>\r\n    <li class=\"my-2 mx-2\">\r\n      <datepicker *ngIf=\"showDate\"\r\n                  [(ngModel)]=\"localValue\"\r\n                  (ngModelChange)=\"onPickerChange('datepicker')\"\r\n                  [showWeeks]=\"showWeeks\"\r\n                  [datepickerMode]=\"datepickerMode\"\r\n                  [minDate]=\"minDate\"\r\n                  [maxDate]=\"maxDate\"\r\n                  [dateDisabled]=\"dateDisabled\"></datepicker>\r\n      <timepicker *ngIf=\"showTime\"\r\n                  [(ngModel)]=\"localValue\"\r\n                  [min]=\"minDate\"\r\n                  [max]=\"maxDate\"\r\n                  [hourStep]=\"hourStep\"\r\n                  [minuteStep]=\"minuteStep\"\r\n                  [secondsStep]=\"secondsStep\"\r\n                  [showSeconds]=\"showSeconds\"\r\n                  [showMeridian]=\"showMeridian\"\r\n                  (ngModelChange)=\"onPickerChange('timepicker')\"></timepicker>\r\n    </li>\r\n    <li class=\"mx-2 mb-2\">\r\n      <span class=\"btn-group float-left\">\r\n          <button type=\"button\"\r\n                  (click)=\"onNow()\"\r\n                  *ngIf=\"nowButton.show\"\r\n                  [ngClass]=\"nowButton.cssClass\">{{ nowButton.label }}</button>\r\n          <button type=\"button\"\r\n                  (click)=\"onClear()\"\r\n                  *ngIf=\"clearButton.show\"\r\n                  [ngClass]=\"clearButton.cssClass\">{{ clearButton.label }}</button>\r\n      </span>\r\n      <span class=\"btn-group float-right\">\r\n          <button type=\"button\"\r\n                  (click)=\"onClose()\"\r\n                  *ngIf=\"closeButton.show\"\r\n                  [ngClass]=\"closeButton.cssClass\">{{ closeButton.label }}</button>\r\n      </span>\r\n    </li>\r\n  </ul>\r\n</div>\r\n", components: [{ type: i1.DatePickerComponent, selector: "datepicker", inputs: ["datepickerMode", "showWeeks", "monthColLimit", "yearColLimit", "activeDate", "initDate", "minDate", "maxDate", "minMode", "maxMode", "formatDay", "formatMonth", "formatYear", "formatDayHeader", "formatDayTitle", "formatMonthTitle", "startingDay", "yearRange", "onlyCurrentMonth", "shortcutPropagation", "customClass", "dateDisabled", "dayDisabled"], outputs: ["selectionDone", "activeDateChange"] }, { type: i2.TimepickerComponent, selector: "timepicker", inputs: ["hourStep", "minuteStep", "secondsStep", "readonlyInput", "disabled", "mousewheel", "arrowkeys", "showSpinners", "showMeridian", "showMinutes", "showSeconds", "meridians", "hoursPlaceholder", "minutesPlaceholder", "secondsPlaceholder", "min", "max"], outputs: ["isValid"] }], directives: [{ type: i3.BsDropdownDirective, selector: "[bsDropdown], [dropdown]", inputs: ["dropup", "autoClose", "isAnimated", "insideClick", "isDisabled", "isOpen", "placement", "triggers", "container"], outputs: ["onShown", "onHidden", "isOpenChange"], exportAs: ["bs-dropdown"] }, { type: OffClickDirective, selector: "[offClick]", outputs: ["offClick"] }, { type: i3.BsDropdownMenuDirective, selector: "[bsDropdownMenu],[dropdownMenu]", exportAs: ["bs-dropdown-menu"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.0", ngImport: i0, type: DatetimePopupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'datetime-popup', styles: [], template: "<div [container]=\"appendTo\" (isOpenChange)=\"onOpenChange($event)\" [dropup]=\"isDropUp\" dropdown #dropdown=\"bs-dropdown\" [autoClose]=\"false\" (offClick)=\"onOffClick($event)\">\r\n  <ul class=\"datetime-popup dropdown-menu\" role=\"menu\" [ngClass]=\"{ 'show': dropdown.isOpen === true, 'body-container': appendTo == 'body', 'dropdown': !isDropUp, 'dropup': isDropUp }\" *dropdownMenu>\r\n    <li class=\"my-2 mx-2\">\r\n      <datepicker *ngIf=\"showDate\"\r\n                  [(ngModel)]=\"localValue\"\r\n                  (ngModelChange)=\"onPickerChange('datepicker')\"\r\n                  [showWeeks]=\"showWeeks\"\r\n                  [datepickerMode]=\"datepickerMode\"\r\n                  [minDate]=\"minDate\"\r\n                  [maxDate]=\"maxDate\"\r\n                  [dateDisabled]=\"dateDisabled\"></datepicker>\r\n      <timepicker *ngIf=\"showTime\"\r\n                  [(ngModel)]=\"localValue\"\r\n                  [min]=\"minDate\"\r\n                  [max]=\"maxDate\"\r\n                  [hourStep]=\"hourStep\"\r\n                  [minuteStep]=\"minuteStep\"\r\n                  [secondsStep]=\"secondsStep\"\r\n                  [showSeconds]=\"showSeconds\"\r\n                  [showMeridian]=\"showMeridian\"\r\n                  (ngModelChange)=\"onPickerChange('timepicker')\"></timepicker>\r\n    </li>\r\n    <li class=\"mx-2 mb-2\">\r\n      <span class=\"btn-group float-left\">\r\n          <button type=\"button\"\r\n                  (click)=\"onNow()\"\r\n                  *ngIf=\"nowButton.show\"\r\n                  [ngClass]=\"nowButton.cssClass\">{{ nowButton.label }}</button>\r\n          <button type=\"button\"\r\n                  (click)=\"onClear()\"\r\n                  *ngIf=\"clearButton.show\"\r\n                  [ngClass]=\"clearButton.cssClass\">{{ clearButton.label }}</button>\r\n      </span>\r\n      <span class=\"btn-group float-right\">\r\n          <button type=\"button\"\r\n                  (click)=\"onClose()\"\r\n                  *ngIf=\"closeButton.show\"\r\n                  [ngClass]=\"closeButton.cssClass\">{{ closeButton.label }}</button>\r\n      </span>\r\n    </li>\r\n  </ul>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { dropdown: [{
                type: ViewChild,
                args: ['dropdown', { static: true }]
            }], appendTo: [{
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], showPopup: [{
                type: Input
            }], showPopupChange: [{
                type: Output
            }], showDate: [{
                type: Input
            }], showTime: [{
                type: Input
            }], showWeeks: [{
                type: Input
            }], showMeridian: [{
                type: Input
            }], showSeconds: [{
                type: Input
            }], datepickerMode: [{
                type: Input
            }], initDate: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateDisabled: [{
                type: Input
            }], nowButton: [{
                type: Input
            }], clearButton: [{
                type: Input
            }], closeButton: [{
                type: Input
            }], minuteStep: [{
                type: Input
            }], hourStep: [{
                type: Input
            }], secondsStep: [{
                type: Input
            }], onWindowScroll: [{
                type: HostListener,
                args: ['window:scroll', []]
            }, {
                type: HostListener,
                args: ['window:resize', []]
            }] } });

class DatetimePopupModule {
}
DatetimePopupModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.0", ngImport: i0, type: DatetimePopupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DatetimePopupModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.0", ngImport: i0, type: DatetimePopupModule, declarations: [DatetimePopupComponent, OffClickDirective], imports: [CommonModule,
        FormsModule,
        DatepickerModule,
        TimepickerModule,
        BsDatepickerModule,
        BsDropdownModule], exports: [DatetimePopupComponent] });
DatetimePopupModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.0", ngImport: i0, type: DatetimePopupModule, providers: [BsDatepickerConfig, BsDropdownConfig], imports: [[
            CommonModule,
            FormsModule,
            DatepickerModule,
            TimepickerModule,
            BsDatepickerModule,
            BsDropdownModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.0", ngImport: i0, type: DatetimePopupModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DatetimePopupComponent, OffClickDirective],
                    imports: [
                        CommonModule,
                        FormsModule,
                        DatepickerModule,
                        TimepickerModule,
                        BsDatepickerModule,
                        BsDropdownModule,
                    ],
                    exports: [DatetimePopupComponent],
                    providers: [BsDatepickerConfig, BsDropdownConfig]
                }]
        }] });

/*
 * Public API Surface of ngx-bootstrap-datetime-popup
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DatetimePopupComponent, DatetimePopupModule };
//# sourceMappingURL=ngx-bootstrap-datetime-popup.mjs.map
