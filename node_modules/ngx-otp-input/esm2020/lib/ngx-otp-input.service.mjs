import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class NgxOtpInputService {
    init2DArray(size) {
        return new Array(size).fill(new Array());
    }
    toArray(value) {
        return Array.isArray(value) ? value : [value];
    }
    addItemToAll(source, items) {
        if (source?.length > 0) {
            return source.map((entry) => entry.concat(items));
        }
    }
    removeItemFromAll(source, items) {
        if (source?.length > 0) {
            return source.map((entry) => entry.filter((item) => !items.includes(item)));
        }
    }
    addItemAtIndex(source, index, items) {
        if (source?.length > 0) {
            source[index] = source[index].concat(items);
            return source;
        }
    }
    removeItemAtIndex(source, index, items) {
        if (source?.length > 0) {
            source[index] = source[index].filter((item) => !items.includes(item));
            return source;
        }
    }
}
NgxOtpInputService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NgxOtpInputService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgxOtpInputService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NgxOtpInputService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NgxOtpInputService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW90cC1pbnB1dC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW90cC1pbnB1dC9zcmMvbGliL25neC1vdHAtaW5wdXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUczQyxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLFdBQVcsQ0FBQyxJQUFZO1FBQ3RCLE9BQU8sSUFBSSxLQUFLLENBQVcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxFQUFVLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQXdCO1FBQzlCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxZQUFZLENBQUMsTUFBa0IsRUFBRSxLQUFlO1FBQzlDLElBQUksTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsTUFBa0IsRUFBRSxLQUFlO1FBQ25ELElBQUksTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdFO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FDWixNQUFrQixFQUNsQixLQUFhLEVBQ2IsS0FBZTtRQUVmLElBQUksTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUMsT0FBTyxNQUFNLENBQUM7U0FDZjtJQUNILENBQUM7SUFFRCxpQkFBaUIsQ0FDZixNQUFrQixFQUNsQixLQUFhLEVBQ2IsS0FBZTtRQUVmLElBQUksTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3RFLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7SUFDSCxDQUFDOzsrR0F6Q1Usa0JBQWtCO21IQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5neE90cElucHV0U2VydmljZSB7XG4gIGluaXQyREFycmF5KHNpemU6IG51bWJlcik6IHN0cmluZ1tdW10ge1xuICAgIHJldHVybiBuZXcgQXJyYXk8c3RyaW5nW10+KHNpemUpLmZpbGwobmV3IEFycmF5PHN0cmluZz4oKSk7XG4gIH1cblxuICB0b0FycmF5KHZhbHVlOiBzdHJpbmcgfCBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gIH1cblxuICBhZGRJdGVtVG9BbGwoc291cmNlOiBzdHJpbmdbXVtdLCBpdGVtczogc3RyaW5nW10pOiBzdHJpbmdbXVtdIHtcbiAgICBpZiAoc291cmNlPy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gc291cmNlLm1hcCgoZW50cnkpID0+IGVudHJ5LmNvbmNhdChpdGVtcykpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUl0ZW1Gcm9tQWxsKHNvdXJjZTogc3RyaW5nW11bXSwgaXRlbXM6IHN0cmluZ1tdKTogc3RyaW5nW11bXSB7XG4gICAgaWYgKHNvdXJjZT8ubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5tYXAoKGVudHJ5KSA9PiBlbnRyeS5maWx0ZXIoKGl0ZW0pID0+ICFpdGVtcy5pbmNsdWRlcyhpdGVtKSkpO1xuICAgIH1cbiAgfVxuXG4gIGFkZEl0ZW1BdEluZGV4KFxuICAgIHNvdXJjZTogc3RyaW5nW11bXSxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGl0ZW1zOiBzdHJpbmdbXVxuICApOiBzdHJpbmdbXVtdIHtcbiAgICBpZiAoc291cmNlPy5sZW5ndGggPiAwKSB7XG4gICAgICBzb3VyY2VbaW5kZXhdID0gc291cmNlW2luZGV4XS5jb25jYXQoaXRlbXMpO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVJdGVtQXRJbmRleChcbiAgICBzb3VyY2U6IHN0cmluZ1tdW10sXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBpdGVtczogc3RyaW5nW11cbiAgKTogc3RyaW5nW11bXSB7XG4gICAgaWYgKHNvdXJjZT8ubGVuZ3RoID4gMCkge1xuICAgICAgc291cmNlW2luZGV4XSA9IHNvdXJjZVtpbmRleF0uZmlsdGVyKChpdGVtKSA9PiAhaXRlbXMuaW5jbHVkZXMoaXRlbSkpO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==