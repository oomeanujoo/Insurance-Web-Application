import { Directive, HostListener, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class PatternDirective {
    constructor() {
        // allowed keys apart from numeric characters
        this.allowedKeys = [
            'Backspace',
            'ArrowLeft',
            'ArrowRight',
            'Escape',
            'Tab',
        ];
    }
    onKeyDown(e) {
        if (this.allowedKeys.includes(e.key) ||
            (e.code === 'KeyA' && e.ctrlKey === true) || // Allow: Ctrl+A
            (e.code === 'KeyC' && e.ctrlKey === true) || // Allow: Ctrl+C
            (e.code === 'KeyV' && e.ctrlKey === true) || // Allow: Ctrl+V
            (e.code === 'KeyX' && e.ctrlKey === true) || // Allow: Ctrl+X
            (e.code === 'KeyA' && e.metaKey === true) || // Cmd+A (Mac)
            (e.code === 'KeyC' && e.metaKey === true) || // Cmd+C (Mac)
            (e.code === 'KeyV' && e.metaKey === true) || // Cmd+V (Mac)
            (e.code === 'KeyX' && e.metaKey === true) // Cmd+X (Mac)
        ) {
            return; // let it happen, don't do anything
        }
        else if (!this.pattern.test(e.key)) {
            e.preventDefault();
        }
    }
}
PatternDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: PatternDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
PatternDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.1", type: PatternDirective, selector: "[ngxOtpPattern]", inputs: { pattern: ["ngxOtpPattern", "pattern"] }, host: { listeners: { "keydown": "onKeyDown($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: PatternDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxOtpPattern]',
                }]
        }], propDecorators: { pattern: [{
                type: Input,
                args: ['ngxOtpPattern']
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0dGVybi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtb3RwLWlucHV0L3NyYy9saWIvcGF0dGVybi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUsvRCxNQUFNLE9BQU8sZ0JBQWdCO0lBSDdCO1FBSUUsNkNBQTZDO1FBQ3JDLGdCQUFXLEdBQUc7WUFDcEIsV0FBVztZQUNYLFdBQVc7WUFDWCxZQUFZO1lBQ1osUUFBUTtZQUNSLEtBQUs7U0FDTixDQUFDO0tBcUJIO0lBakJzQyxTQUFTLENBQUMsQ0FBZ0I7UUFDN0QsSUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsSUFBSSxnQkFBZ0I7WUFDN0QsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxJQUFJLGdCQUFnQjtZQUM3RCxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssTUFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLElBQUksZ0JBQWdCO1lBQzdELENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsSUFBSSxnQkFBZ0I7WUFDN0QsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxJQUFJLGNBQWM7WUFDM0QsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxJQUFJLGNBQWM7WUFDM0QsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxJQUFJLGNBQWM7WUFDM0QsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLGNBQWM7VUFDeEQ7WUFDQSxPQUFPLENBQUMsbUNBQW1DO1NBQzVDO2FBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDOzs2R0E1QlUsZ0JBQWdCO2lHQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFINUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2lCQUM1Qjs4QkFXeUIsT0FBTztzQkFBOUIsS0FBSzt1QkFBQyxlQUFlO2dCQUVlLFNBQVM7c0JBQTdDLFlBQVk7dUJBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3hPdHBQYXR0ZXJuXScsXG59KVxuZXhwb3J0IGNsYXNzIFBhdHRlcm5EaXJlY3RpdmUge1xuICAvLyBhbGxvd2VkIGtleXMgYXBhcnQgZnJvbSBudW1lcmljIGNoYXJhY3RlcnNcbiAgcHJpdmF0ZSBhbGxvd2VkS2V5cyA9IFtcbiAgICAnQmFja3NwYWNlJyxcbiAgICAnQXJyb3dMZWZ0JyxcbiAgICAnQXJyb3dSaWdodCcsXG4gICAgJ0VzY2FwZScsXG4gICAgJ1RhYicsXG4gIF07XG5cbiAgQElucHV0KCduZ3hPdHBQYXR0ZXJuJykgcGF0dGVybjogUmVnRXhwO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKSBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIHRoaXMuYWxsb3dlZEtleXMuaW5jbHVkZXMoZS5rZXkpIHx8XG4gICAgICAoZS5jb2RlID09PSAnS2V5QScgJiYgZS5jdHJsS2V5ID09PSB0cnVlKSB8fCAvLyBBbGxvdzogQ3RybCtBXG4gICAgICAoZS5jb2RlID09PSAnS2V5QycgJiYgZS5jdHJsS2V5ID09PSB0cnVlKSB8fCAvLyBBbGxvdzogQ3RybCtDXG4gICAgICAoZS5jb2RlID09PSAnS2V5VicgJiYgZS5jdHJsS2V5ID09PSB0cnVlKSB8fCAvLyBBbGxvdzogQ3RybCtWXG4gICAgICAoZS5jb2RlID09PSAnS2V5WCcgJiYgZS5jdHJsS2V5ID09PSB0cnVlKSB8fCAvLyBBbGxvdzogQ3RybCtYXG4gICAgICAoZS5jb2RlID09PSAnS2V5QScgJiYgZS5tZXRhS2V5ID09PSB0cnVlKSB8fCAvLyBDbWQrQSAoTWFjKVxuICAgICAgKGUuY29kZSA9PT0gJ0tleUMnICYmIGUubWV0YUtleSA9PT0gdHJ1ZSkgfHwgLy8gQ21kK0MgKE1hYylcbiAgICAgIChlLmNvZGUgPT09ICdLZXlWJyAmJiBlLm1ldGFLZXkgPT09IHRydWUpIHx8IC8vIENtZCtWIChNYWMpXG4gICAgICAoZS5jb2RlID09PSAnS2V5WCcgJiYgZS5tZXRhS2V5ID09PSB0cnVlKSAvLyBDbWQrWCAoTWFjKVxuICAgICkge1xuICAgICAgcmV0dXJuOyAvLyBsZXQgaXQgaGFwcGVuLCBkb24ndCBkbyBhbnl0aGluZ1xuICAgIH0gZWxzZSBpZiAoIXRoaXMucGF0dGVybi50ZXN0KGUua2V5KSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxufVxuIl19